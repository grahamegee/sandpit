#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#---------------------------------------------------------------------------------
# my original solution which is a bit of a hack.. problem is that I have
# arbitrarely chosen 40 as the upper limit of my range, knowing that we should
# be over 4000000 by then. At least I noticed that the odd/even flip happens
# every third step...
#---------------------------------------------------------------------------------

def fib(n):
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		return fib(n-1) + fib(n-2)

print sum([fib(x) for x in range(3,40,3) if fib(x) <= 4000000])

#---------------------------------------------------------------------------------
# a better solution is below from the answer sheet
#
# 1 1 (2) 3 5 (8) 13 21 (34) 55 89 (144)
# a b  c  a b  c   a  b   c   a  b    c
#---------------------------------------------------------------------------------

#its a LOT quicker too

limit = 4000000
thesum = 0
a = 1
b = 1
c = a+b
while c < limit:
	thesum += c
	a = b + c
	b = c + a
	c = a + b
print thesum
